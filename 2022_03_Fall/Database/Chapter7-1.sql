-- Query 1
SELECT EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL
FROM EMPLOYEE
WHERE EMP_LNAME LIKE "SMITH%" -- Start with Smith
-- to end with smith we woud use '%SMITH'
ORDER BY EMP_NUM;


-- Query 2
SELECT PROJ_NAME, PROJ_VALUE, EMP_LNAME, EMP_FNAME, EMP_INITIAL,
  JOB_CODE, JOB_DESCRIPTION, JOB_CHG_HOUR
-- Natural join is OK since attrbutes have same name
-- Don't use JOIN (that's cross-join!)
FROM EMPLOYEE NATURAL JOIN JOB NATURAL JOIN PROJECT
ORDER BY PROJ_VALUE;


-- Query 3
SELECT PROJ_NAME, PROJ_VALUE, EMP_LNAME, EMP_FNAME, EMP_INITIAL,
  JOB_CODE, JOB_DESCRIPTION, JOB_CHG_HOUR
FROM EMPLOYEE NATURAL JOIN JOB NATURAL JOIN PROJECT
-- Can order by any attribute
ORDER BY EMP_LNAME;

-- Query 4
-- Without DISTINCT we would double count
SELECT DISTINCT PROJ_NUM FROM ASSIGNMENT
ORDER BY PROJ_NUM;

-- Query 5
SELECT ASSIGN_NUM,EMP_NUM, PROJ_NUM, ASSIGN_CHARGE,
-- This next line should == ASSIGN_CHARGE
  ROUND(ASSIGN_CHG_HR * ASSIGN_HOURS, 2) AS CALC_ASSIGN_CHARGE
FROM ASSIGNMENT;

--Skipped a few (don't do for students)

-- Query 9: Count Invoices
SELECT COUNT(*) FROM INVOICE;

-- Query 10
SELECT COUNT(*) 
FROM CUSTOMER 
-- Our first WHERE clause!
WHERE CUS_BALANCE > 500;

-- Query 11
SELECT CUS_CODE, INV_NUMBER, INV_DATE, P_DESCRIPT, 
  LINE_UNITS, LINE_PRICE
FROM INVOICE NATURAL JOIN LINE NATURAL JOIN PRODUCT
--Can order by multiple columns
ORDER BY CUS_CODE, INV_NUMBER, P_DESCRIPT;

-- Query 12
SELECT CUS_CODE, INV_NUMBER, P_DESCRIPT, 
-- Use aliases to rename columns
  LINE_UNITS AS "Units Bought", 
  LINE_PRICE AS "Unit Price",
  -- Calcuate subtotal and then give it an alias
  ROUND(LINE_UNITS * LINE_PRICE, 2) AS "Subtotal"
FROM INVOICE NATURAL JOIN LINE NATURAL JOIN PRODUCT
ORDER BY CUS_CODE, INV_NUMBER, P_DESCRIPT;

-- Query 13
SELECT CUS_CODE, CUS_BALANCE, 
-- The "SUM" is per customer
  ROUND(SUM(LINE_UNITS * LINE_PRICE), 2) AS "Total Purchases"
FROM INVOICE NATURAL JOIN LINE NATURAL JOIN CUSTOMER
-- We only want one line per customer, with a "total purchase" for each
GROUP BY CUS_CODE
ORDER BY CUS_CODE;


ELECT CUS_CODE, CUS_BALANCE, 
  ROUND(SUM(LINE_UNITS * LINE_PRICE), 2) AS "Total Purchases",
  -- We can use aggregage functions like SUM and COUNT with GROUP BY
  COUNT(LINE_NUMBER) AS "Number of Purchases"
FROM INVOICE NATURAL JOIN LINE NATURAL JOIN CUSTOMER
GROUP BY CUS_CODE
ORDER BY CUS_CODE;